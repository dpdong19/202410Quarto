{
  "hash": "097d4edcaeab407ffc3599e10db13cea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on #2: More YAML\"\nauthor: \"Danping\"\ndate: 2024-07-30\nformat:\n  html:\n    theme: default\n    highlight-style: \"breeze\"\n    code-line-numbers: true\n    warning: false\n    code-fold: show\n    code-tools: true\n    code-overflow: wrap\n---\n\n\n\n\n\n## Hands-on: More YAML\n\n### Instructions\n\nUse the Quarto document you created earlier, try different **YAML options** and **render** the document to see the resulting changes on the output document. Make sure to have different level headings, some text, and some executable codes - you can copy the [sample code chunk](#sample-code) below.\n\n**Table of Contents**\n\n-   Add your table of contents `toc: true`\n-   Change the depth of your Table of Contents, e.g. `toc-depth: 3`\n-   Type `number-sections` and click on `TAB` on your keyboard, What do you see? What does this YAML option do?\n-   Change to other format, e.g. `html, PDF, pptx, revealjs`. How does the layout change?\n\n**Look & Feel**\n\n-   Pick a [HTML theme](https://quarto.org/docs/output-formats/html-themes.html) at this link to be applied on your document, e.g. `theme: \"quartz\"`\n-   Render with terminal and Quarto console\n\n**Code & Execution**\n\nTry the YAML options below and find out what they do. Use `#` to write down your answers in the code chunk. Note: Ensure that there are some executable code chunks in your document.\n\n```         \n    highlight-style: \"breeze\" #this is to change the code highlighting style\n    code-line-numbers: \n    code-tools: \n    code-fold:          #press TAB to see available options\n    code-overflow:      #press TAB to see available options\n    echo: false  # whether to show the code \n    eval: true # whether to run the code \n    warning:\n    error:\n```\n\nCheck out more [highlighting styles](https://quarto.org/docs/output-formats/html-code.html#highlighting) here.\n\n### Sample Code {#sample-code}\n\nYou may copy the code chunk below into your document, so as to try out the code and execution-related settings.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nggplot(penguins, \n       aes(x = flipper_length_mm, y = bill_length_mm)) +\n  geom_point(aes(color = species, shape = species)) +\n  scale_color_manual(values = c(\"darkorange\",\"purple\",\"cyan4\")) +\n  labs(\n    title = \"Flipper and bill length\",\n    subtitle = \"Dimensions for penguins at Palmer Station LTER\",\n    x = \"Flipper length (mm)\", y = \"Bill length (mm)\",\n    color = \"Penguin species\", shape = \"Penguin species\"\n  ) +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](02-YAML_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n## Use this very loooong code line to test code-overflow options\n\nresult <- data.frame(id = 1:100, value = rnorm(100), category = sample(c(\"A\", \"B\", \"C\"), 100, replace = TRUE), subcategory = sample(c(\"X\", \"Y\", \"Z\"), 100, replace = TRUE), date = seq.Date(from = as.Date(\"2023-01-01\"), by = \"day\", length.out = 100))\n\nhead(result)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  id       value category subcategory       date\n1  1 -0.80579637        C           Y 2023-01-01\n2  2  0.07197866        C           X 2023-01-02\n3  3 -0.05077640        A           Y 2023-01-03\n4  4  0.08582747        B           Y 2023-01-04\n5  5 -0.38982419        A           Y 2023-01-05\n6  6  0.10028033        C           Y 2023-01-06\n```\n\n\n:::\n:::\n",
    "supporting": [
      "02-YAML_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}