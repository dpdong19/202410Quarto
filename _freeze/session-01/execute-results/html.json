{
  "hash": "5ce98e860d980517752461fd12f6a6b1",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Getting Started with Quarto\"\nauthor: \"Danping DONG & Bella RATMELIA\"\nformat:\n  revealjs: \n    incremental: false\n    highlight-style: breeze\n---\n\n\n\n\n# Welcome\n\nHello!\n\nLet's get to know each other.\n\n*What is your role/field of work/research area? Are you familiar with RStudio or R Markdown?*\n\n*What do you want to learn from this workshop?*\n\n## About this Workshop\n\n-   Prior experience with R is highly recommended for this course\n-   [Workshop Website](https://dpdong19.github.io/202410Quarto) (built with Quarto)\n    -   Pre-workshop setup instructions\n    -   Workshop materials\n    -   Lesson objectives and lesson plan\n\n::: callout-note\nIf you need help at any time, please raise your hand.\n:::\n\n## Learning Objectives\n\nBy the end of the session, participants will be able to:\n\n1.  Understand the fundamental concepts of Quarto, including its role in promoting transparency and reproducibility in academic writing.\n2.  Learn how to navigate the Quarto interface within RStudio, focusing on the basics of Markdown for structuring academic documents.\n3.  Gain hands-on experience in creating simple Quarto documents by integrating narrative text, code, figures, and tables.\n\n## Outline for today\n\n-   Literate Programming and Reproducible Research\n-   Introduction to Quarto\n-   Markdown Basics\n-   YAML\n-   Figures, tables and cross references\n\n::: callout-note\nWe will have some hands-on, in between the 'lectures'!\n:::\n\n## Literate Programming\n\n> \"*Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a **computer** what to do, let us concentrate rather on explaining to **human** beings what we want a computer to do.*\"\n>\n> -- Donald Knuth, 1984\n\nEssentially, literate programming is about:\n\n-   Creating code that is not only executable but also readable and understandable by humans\n\n-   Weaving code and documentation in a **single document**, emphasizing human-readable explanation alongside executable code\n\n------------------------------------------------------------------------\n\n### Example: eLife Reproducible Article\n\n![](images/02_reproducible_elife.PNG)\n\n------------------------------------------------------------------------\n\n### Example: eLife Reproducible Article\n\n::: {layout-ncol=\"2\"}\n[![A figure from the reproducible article](images/03a_elife_figure.PNG)](https://elifesciences.org/articles/30274/executable)\n\n[![The underlying live codes for the same figure](images/03b_elife_figure_code.PNG)](https://elifesciences.org/articles/30274/executable)\n:::\n\n## Research Transparency & Reproducibility\n\n-   Enables researcher to provide clear, detailed descriptions of their methodologies, algorithms, and computational processes.\n\n-   This integration ensures that the logic and rationale behind each part of the code are explicitly documented, making it easier for others to follow, reproduce, and validate the research.\n\n-   Reduces ambiguities and potential misinterpretations, fostering a more robust and transparent scientific discourse.\n\nIn Quarto, this is enabled through code chunks - more details about this on the next session\n\n::: notes\nThese are some speaker notes\n:::\n\n## A Quick Overview or Recap of R & R Studio\n\n![](images/rstudio-tour.jpg){fig-align=\"center\"}\n\n# Introduction to Quarto\n\n## What is Quarto?\n\n-   Quarto is an open-source scientific and technical publishing system\n\n-   It is the next-generation of R Markdown\n\n-   Supports multiple programming languages (R, Python, Julia)\n\n-   Enables the creation of dynamic and reproducible documents, reports, presentations and websites\n\n![](images/quarto%20universe.png)\n\n::: notes\nOur slides and workshop websites are all built with Quarto!\n:::\n\n## What does a Quarto document look like?\n\n![](images/01_quarto_doc.png)\n\n## What does a Quarto document look like?\n\nA Quarto document (.qmd) is a plain text file that can be rendered to many different formats, e.g. html, PDF, .docx\n\n![](images/01a%20penguins.png)\n\n## Rendering to different formats\n\n-   HTML reports and websites\n-   PDF reports\n-   MS Office Word\n-   Presentations (revealjs, Powerpoint, Beamer)\n-   Books\n\n## What can you do with Quarto?\n\n::: {layout-ncol=\"2\"}\n[![Creating html for web publishing](images/04_website_html.PNG){fig-align=\"left\" width=\"714\"}](https://quarto-dev.github.io/quarto-gallery/articles/html/html.html)\n\n[![Generating reports in PDF](images/04_PDF_report.png){fig-align=\"left\" width=\"495\"}](https://quarto-dev.github.io/quarto-gallery/page-layout/tufte.pdf)\n:::\n\n## What can you do with Quarto?\n\n[![MS Word for office workflows](images/04_MS%20word.PNG){height=\"600\" fig-align=\"left\"}](https://quarto-dev.github.io/quarto-gallery/articles/msword/msword.docx)\n\n## What can you do with Quarto?\n\nCreate dynamic [presentations]{.fragment .highlight-blue}\n\nlike the one you're [seeing]{.fragment .highlight-red} right now!\n\n::: {.fragment .fade-up}\nand much more!\n:::\n\n## Quarto is more than just R\n\n-   Quarto supports R, [Python](https://quarto.org/docs/computations/python.html), Julia, Observable and more\n-   Quarto can directly render Jupyter Notebooks (.ipynb) without conversion\n\n``` bash\nquarto render document.ipynb\n```\n\n## Executable Python code blocks in Quarto\n\n-   Install the `reticulate` package to seamlessly integrate Python code chunks in Quarto `install.packages(\"reticulate\")`\n-   When you use a Python chunk in a Quarto document, `knitr` uses `reticulate` to execute the Python code\n\n::: callout-note\nNote: `Knitr` is a dynamic report generation engine for R that executes code chunks embedded in documents, integrating the results seamlessly into the output, thus enabling reproducible research and literate programming.\n:::\n\n## Anatomy of a Quarto document\n\n-   **Metadata (YAML)**\n\n```         \n---\nformat: html\n---\n```\n\n-   **Code**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>%\n  summarize(mean = mean(mpg), .groups = \"drop\")\n```\n:::\n\n\n\n\n-   **Text**\n\n```         \n## Heading 1\nThis is a sentence with some **bold text**.\n```\n\n## What is YAML?\n\n::: nonincremental\n-   Quarto documents begin with **YAML** (**Y**AML **A**in't **M**arkup **L**anguage) headers\n-   YAML specify document metadata and control settings which influences document rendering and final output in many different ways:\n    -   Title, author, date\n    -   Output format (HTML, PDF, Word, etc.)\n    -   Table of contents settings\n    -   Bibliography and citation style\n    -   And more!\n:::\n\n## Markdown and R Markdown\n\n-   **Markdown** is the underlying document syntax for Quarto and R Markdown\n\n-   lightweight markup language, which uses plain text with simple syntax for easy text formatting\n\n-   widely used for documentation, README files and web content\n\n-   RMarkdown is an extension of Markdown, developed by RStudio, which allows embedding of R code chunks within Markdown documents\n\n## Markdown Basics: Syntax\n\n+-----------------------------------------+-----------------------------------------+\n| Markdown Syntax                         | Output                                  |\n+=========================================+=========================================+\n| ``` markdown                            | *italics*, **bold**, ***bold italics*** |\n| *italics*, **bold**, ***bold italics*** |                                         |\n| ```                                     |                                         |\n+-----------------------------------------+-----------------------------------------+\n| ``` markdown                            | superscript^2^ / subscript~2~           |\n| superscript^2^ / subscript~2~           |                                         |\n| ```                                     |                                         |\n+-----------------------------------------+-----------------------------------------+\n| ``` markdown                            | ~~strikethrough~~                       |\n| ~~strikethrough~~                       |                                         |\n| ```                                     |                                         |\n+-----------------------------------------+-----------------------------------------+\n| ``` markdown                            | `verbatim code`                         |\n| `verbatim code`                         |                                         |\n| ```                                     |                                         |\n+-----------------------------------------+-----------------------------------------+\n\n::: callout-tip\n### Tip\n\nTo create a line break, you can use two spaces at the end of a line OR a backslash `\\`.\n\nTo create a paragraph, type `Enter` twice.\n:::\n\n## Markdown Basics - Headings\n\n+-----------------+-----------------------------------+\n| Markdown Syntax | Output                            |\n+=================+===================================+\n| ```             | # Header 1 {.heading-output}      |\n| # Header 1      |                                   |\n| ```             |                                   |\n+-----------------+-----------------------------------+\n| ```             | ## Header 2 {.heading-output}     |\n| ## Header 2     |                                   |\n| ```             |                                   |\n+-----------------+-----------------------------------+\n| ```             | ### Header 3 {.heading-output}    |\n| ### Header 3    |                                   |\n| ```             |                                   |\n+-----------------+-----------------------------------+\n| ```             | #### Header 4 {.heading-output}   |\n| #### Header 4   |                                   |\n| ```             |                                   |\n+-----------------+-----------------------------------+\n| ```             | ##### Header 5 {.heading-output}  |\n| ##### Header 5  |                                   |\n| ```             |                                   |\n+-----------------+-----------------------------------+\n| ```             | ###### Header 6 {.heading-output} |\n| ###### Header 6 |                                   |\n| ```             |                                   |\n+-----------------+-----------------------------------+\n\n<style type=\"text/css\">\n.heading-output {\n  border-bottom: none;\n  margin-top: 0;\n  margin-bottom: 0;\n}\n</style>\n\n# Let's try this together!\n\nCreate your first Quarto document.\n\nFollow instructions at the course website here: <https://dpdong19.github.io/202410Quarto/hands-on/01-basics.html#instructions>\n\n## Anatomy of a Quarto document\n\n-   **Metadata (YAML)**\n\n```         \n---\nformat: html\n---\n```\n\n-   **Code**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>%\n  summarize(mean = mean(mpg), .groups = \"drop\")\n```\n:::\n\n\n\n\n-   **Text**\n\n```         \n## Heading 1\nThis is a sentence with some **bold text**.\n```\n\n## Lists\n\n:::: panel-tabset\n### Code {.smaller}\n\n```         \n**Unordered List**\n\n-   item 1\n    -   sub-item 1\n    -   sub-item 2\n        -   sub-sub-item 1\n\n**Ordered List**\n\n1.  item 1\n2.  item 2\n    i)  sub-item 1\n        A.  sub-sub-item 1\n\n**Checkbox**\n\n-  [ ] Task 1 \n-  [x] Task 2\n```\n\n### Output {.smaller}\n\n::: {.nonincremental style=\"font-size: 25px\"}\n**Unordered List**\n\n-   item 1\n    -   sub-item 1\n    -   sub-item 2\n        -   sub-sub-item 1\n\n**Ordered List**\n\n1.  item 1\n2.  item 2\n    i)  sub-item 1\n        A.  sub-sub-item 1\n\n**Checkbox**\n\n-   [ ] Task 1\n-   [x] Task 2\n:::\n::::\n\n## Links\n\n::::: columns\n::: {.column .fragment width=\"50%\"}\n**Markdown Syntax**\n\n```         \n<https://quarto.org>\n```\n\n```         \n[Quarto](https://quarto.org)\n```\n:::\n\n::: {.column .fragment width=\"50%\"}\n**Output**\n\n<https://quarto.org>\n\n[Quarto](https://quarto.org)\n:::\n:::::\n\n## Images from web\n\nImages can be embedded using the following syntax: `![caption](image url)`.\n\n::: panel-tabset\n### Source\n\n```         \n![Quarto Logo](https://quarto.org/quarto.png)\n```\n\n### Output\n\n![Quarto Logo](https://quarto.org/quarto.png)\n:::\n\n## Images from local directory {.smaller}\n\n::: panel-tabset\n### Source\n\n```         \n![Elephant](images/elephant.png)\n```\n\n### Output\n\n![Elephant](images/elephant.png){height=\"600\"}\n:::\n\n# Let's try this together!\n\nAdding lists, links and images to your Quarto document.\n\nFollow instructions at the course website: <https://dpdong19.github.io/202410Quarto/hands-on/01-basics.html#hands-on-markdown-basics>\n\n# Break (10 min)\n\n## Anatomy of a Quarto document\n\n-   **Metadata (YAML)**\n\n```         \n---\nformat: html\n---\n```\n\n-   **Code**\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmtcars %>% \n  group_by(cyl) %>%\n  summarize(mean = mean(mpg), .groups = \"drop\")\n```\n:::\n\n\n\n\n-   **Text**\n\n```         \n## Heading 1\nThis is a sentence with some **bold text**.\n```\n\n## Inline code (non-executable)\n\nUse single backticks to format text to look like code\n\n::: panel-tabset\n### Source\n\n```         \nFollow instructions for `Hands-on #1` at file path: `01-quarto-basics/basics.qmd`\n```\n\n### Output\n\nFollow instructions for `Hands-on #1` at file path: `01-quarto-basics/basics.qmd`\n:::\n\n::: aside\nIf you want to show text containing a backtick using inline code format (for which the backtick will interfere with the formatting), use double backticks \\`\\` to surround your text.\n\nDo you know that inline code can be executable as well?\n:::\n\n## Escaping Characters\n\n-   Sometimes, we need to display characters that have special meaning in Markdown, such as `` \\ ` * ``\n\n-   use one backslash `\\` to escape the character after it\n\n-   example: `\\\\\\*` in markdown source will be displayed as **\\\\\\***\n\n## Adding non-executable code chunks to your document\n\nUse **three backticks** (now this is getting confusing) to create a ***fenced code block*** in your Quarto document\n\n````         \n```\n## You may write some code (non executable) here\n```\n````\n\n-   Fenced code block is helpful to show multiple lines of code\n\n-   everything inside the 'fences' is treated literally as code or plain text, and not processed by Quarto\n\n## Executable Code Chunks in Quarto\n\n-   Use curly braces with language: \\`\\`\\`{r}\n-   Allows for code execution in supported languages\n-   You will learn more about **code chunk options** for output control at the next session\n\n## More YAML\n\n::::: columns\n::: {.column .nonincremental width=\"50%\"}\n```         \n---\ntitle: \"My Document\"\nformat: \n  html:\n    toc: true\n    code-fold: true\n---\n```\n:::\n\n::: {.column .nonincremental width=\"50%\"}\n**What else can you do with YAML document options?**\n\n-   Table of Contents\n\n-   Styling (making things pretty)\n\n-   Code related settings\n\n-   References & Citation\n:::\n:::::\n\n::: callout-caution\nProper indentation and spacing is very important for YAML! Typically, use 2 spaces to create a child-level YAML element and be consistent throughout the YAML section.\n:::\n\n## Rendering\n\nBesides rendering with the RStudio button, you may also render via:\n\n-   Terminal or system shell:\n\n```         \nquarto render document.qmd # defaults to html\nquarto render document.qmd --to pdf\nquarto render document.qmd --to docx\n```\n\n-   R console using `quarto` R package\n\n```         \nlibrary(quarto)\nquarto_render(\"document.qmd\") # defaults to html\nquarto_render(\"document.qmd\", output_format = \"pdf\")\n```\n\n# Let's try this together!\n\nMore YAML options and rendering.\n\nFollow instructions at course website: <https://dpdong19.github.io/202410Quarto/hands-on/02-YAML.html>\n\n## Figures\n\nJust now, we learned about adding images using this syntax `![Elephant](elephant.png)` This results in the following treatment for various output types:\n\n![Example output for HTML, PDF and Word](images/05_figure_output.png){width=\"100%\"}\n\n## Figures: Display size\n\n-   Change display size by adding `width` and `height` attributes:\n\n    `![Elephant](elephant.png){width=300}`\n\n-   Default units are pixels. You can also specify sizes using a percentage:\n\n    `![Elephant](elephant.png){width=80%}`\n\n::: callout-note\nIf only width or height is specified, the other will be calculated automatically\n:::\n\n::: notes\nthis is 80% of the container size, responsive design when the content area may change, consistent sizing across different devices, screen sizes and formats\n:::\n\n## Figures: Alignment\n\n-   Figures are centre-aligned by default. You may change alignment by doing this:\n\n    `![Elephant](elephant.png){fig-align=\"left\"}`\n\n::: callout-note\nFigure captions are left-aligned by default to accommodate longer captions (which looks odd when center aligned)\n:::\n\n![Elephant](images/elephant.png)\n\n## Figures: Alignment\n\n```         \n![Elephant](images/elephant.png){width=\"300\" fig-align=\"left\"}\n```\n\n![Elephant](images/elephant.png){width=\"300\" fig-align=\"left\"}\n\n## Figures: Alt Text\n\n-   Alt Text is important for accessibility, aiding visually impaired users, enhancing SEO, and providing context when images fail to load\n\n`![](elephant.png){fig-alt=\"A line drawing of an elephant.\"}`\n\n## Figures: Applying multiple parameters\n\nTo combine the above attributes, separate arguments by a space, for example:\n\n`![](elephant.png){fig-alt=\"A drawing of an elephant.\" fig-align=\"left\" width=20%}`\n\n![](images/elephant.png){fig-alt=\"A drawing of an elephant.\" fig-align=\"left\" width=\"20%\"}\n\n## Cross-reference a figure in your document\n\n-   You need to add a figure ID with the `fig-` prefix\n-   use `@` to reference the figure\n\n::: panel-tabset\n### Code\n\n```         \n![An Elephant](elephant.png){#fig-elephant}\n\nRefer to @fig-elephant for an illustration of an elephant. \n```\n\n### Output\n\n![An Elephant](images/elephant.png){#fig-elephant height=\"200\" fig-align=\"left\"}\n\nRefer to @fig-elephant for an illustration of an elephant.\n:::\n\n## Figures: Layout in two columns\n\n-   Useful for side-by-side comparisons or holding two images on one page/slide\n\n**Code**\n\n```         \n::: {layout-ncol=\"2\"}\n![Surus](images/surus.png)\n\n![Hanno](images/hanno.png)\n:::\n```\n\n## Figures: Layout in two columns\n\n**Output**\n\n::: {layout-ncol=\"2\"}\n![Surus](images/surus.png)\n\n![Hanno](images/hanno.png)\n:::\n\n::: callout-notes\nTo learn more about different ways of figure layouts, refer to [this page](https://quarto.org/docs/authoring/figures.html).\n:::\n\n## Tables\n\n::::: columns\n::: {.column width=\"50%\"}\nThis is the markdown source for a ***pipe table***:\n\n```         \n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n```\n:::\n\n::: {.column width=\"50%\"}\n**Output**:\n\n| Default | Left | Right | Center |\n|---------|:-----|------:|:------:|\n| 12      | 12   |    12 |   12   |\n| 123     | 123  |   123 |  123   |\n| 1       | 1    |     1 |   1    |\n:::\n:::::\n\n::: callout-note\nYou don't have to construct a table by hand - use Quarto's Visual Editor or an online markdown table generator like [this one](https://www.tablesgenerator.com/markdown_tables).\n:::\n\n## Table Caption\n\n::: panel-tabset\n### Markdown\n\n```         \n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices\n```\n\n### Output\n\n| fruit  | price |\n|--------|-------|\n| apple  | 2.05  |\n| pear   | 1.37  |\n| orange | 3.09  |\n\n: Fruit prices\n:::\n\n## Table Attributes\n\n::: panel-tabset\n### Markdown\n\n```         \n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {tbl-colwidths=\"[10,90]\"}\n```\n\n### Output\n\n| fruit  | price |\n|--------|-------|\n| apple  | 2.05  |\n| pear   | 1.37  |\n| orange | 3.09  |\n\n: Fruit prices {tbl-colwidths=\"\\[10,90\\]\"}\n:::\n\n## Creating tables from R code chunk outputs\n\nTo generate tables directly from R code chunk outputs, use the `knitr::kable()` function\n\n\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\nknitr::kable(head(ggplot2::diamonds))\n```\n````\n\n::: {.cell-output-display}\n\n\n| carat|cut       |color |clarity | depth| table| price|    x|    y|    z|\n|-----:|:---------|:-----|:-------|-----:|-----:|-----:|----:|----:|----:|\n|  0.23|Ideal     |E     |SI2     |  61.5|    55|   326| 3.95| 3.98| 2.43|\n|  0.21|Premium   |E     |SI1     |  59.8|    61|   326| 3.89| 3.84| 2.31|\n|  0.23|Good      |E     |VS1     |  56.9|    65|   327| 4.05| 4.07| 2.31|\n|  0.29|Premium   |I     |VS2     |  62.4|    58|   334| 4.20| 4.23| 2.63|\n|  0.31|Good      |J     |SI2     |  63.3|    58|   335| 4.34| 4.35| 2.75|\n|  0.24|Very Good |J     |VVS2    |  62.8|    57|   336| 3.94| 3.96| 2.48|\n\n\n:::\n:::\n\n\n\n\n::: callout-note\nkable() is a function from the knitr package that creates tables. It takes a data frame or matrix and turns it into a nicely formatted table.\n:::\n\n## Cross-referencing a table in your document\n\n```         \n| fruit  | price  |\n|--------|--------|\n| apple  | 2.05   |\n| pear   | 1.37   |\n| orange | 3.09   |\n\n: Fruit prices {#tbl-fruits}\n```\n\n::: callout-important\nIn order for a table to be cross-referenceable, its label must start with the tbl- prefix.\n:::\n\n## Cross-referencing a table in your document\n\n| fruit  | price |\n|--------|-------|\n| apple  | 2.05  |\n| pear   | 1.37  |\n| orange | 3.09  |\n\n: Fruit prices {#tbl-fruits}\n\n## Cross-referencing a table in your document\n\n```         \nRefer to @tbl-fruits for price of fruits today.\n```\n\n. . .\n\nRefer to @tbl-fruits for price of fruits today.\n\n## Callout box\n\n::: {layout=\"[30,70]\"}\n5 Types of callout blocks:\\\n- `note`\\\n- `warning`\\\n- `important`\\\n- `tip`\\\n- `caution`\n\nThis is how they look like: ![](images/06_callout.png){width=\"90%\"}\n:::\n\n## Callout box\n\n**Code**:\n\n```         \n::: callout-tip\n\nAlternatively, use the Quarto Visual Editor!\n\n:::\n```\n\n**Output**\n\n::: callout-tip\nAlternatively, use the Quarto Visual Editor!\n:::\n\n# Let's try this together!\n\nFollow instructions at `01-quarto-basics/03a-figures-tables.qmd`\n\n# Recap of today's session\n\n-   The role of Quarto in research transparency and reproducibility\n-   Rendering to various output types\n-   Introduction to Quarto\n-   Markdown basics\n-   Lists, links and images\n-   More YAML options\n-   Figures, tables and cross-references\n\n# One Up One Down\n\nPlease tell us one thing you liked about the course and one area of improvement using this [shared document](https://docs.google.com/document/d/1oYT18UdqY4hjNhkqvWA9w9sw7Cmlg6H2VrGgSvtq5mc/edit?usp=sharing).\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}